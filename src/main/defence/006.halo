# Reverse Polish Notation

fun main():
    var stack = Stack();
    var token = readln();

    while token:
        if token == "+":
            var right = stack.pop();
            var left = stack.pop();
            stack.push(left + right);
        elif token == "-":
            var right = stack.pop();
            var left = stack.pop();
            stack.push(left - right);
        elif token == "*":
            var right = stack.pop();
            var left = stack.pop();
            stack.push(left * right);
        elif token == "/":
            var right = stack.pop();
            if (right == 0):
                error("division by 0");
            end
            var left = stack.pop();
            stack.push(left / right);
        else:
            stack.push(to_int(token));    
        end

        println(stack);
        let token = readln();
    end

    println("res: " + to_str(stack.top()));
end

class Stack:
    var top_node;
    
    fun push(data):
        let my.top_node = Node(data, my.top_node);
    end

    fun pop():
        if not my.top_node:
            error("attempt to pop from an empty stack");
        end
        var res = my.top_node.data;
        let my.top_node = my.top_node.next;
        return res;
    end

    fun top():
        if not my.top_node:
            error("attempt to access element in an empty stack");
        end
        return my.top_node.data;
    end
end

class Node:
    var data;
    var next;

    fun _init_(data, next):
        let my.data = data;
        let my.next = next;
    end
end

main();